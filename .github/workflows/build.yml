name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.4)'
        required: true
        default: '1.0.4'

env:
  NODE_VERSION: '20'
  ELECTRON_VERSION: '36.5.0'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: linux
          - os: windows-latest
            artifact_name: windows
          - os: macos-latest
            artifact_name: macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure npm for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retries 3
          npm config set fetch-retry-mintimeout 5000
          npm config set fetch-retry-maxtimeout 60000
          npm config set progress false
          npm config set loglevel warn
          npm config set prefer-offline true

      - name: Clear npm cache (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          npm cache clean --force
          Remove-Item -Path "$env:APPDATA\npm-cache" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "$env:LOCALAPPDATA\npm-cache" -Recurse -Force -ErrorAction SilentlyContinue

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Starting npm install..."
          $ErrorActionPreference = "Continue"
          
          try {
            Write-Host "Attempting npm ci..."
            npm ci --no-audit --no-fund --silent --progress=false --prefer-offline
            if ($LASTEXITCODE -eq 0) {
              Write-Host "npm ci completed successfully"
            } else {
              throw "npm ci failed with exit code $LASTEXITCODE"
            }
          } catch {
            Write-Host "npm ci failed, trying npm install..."
            try {
              npm install --no-audit --no-fund --silent --progress=false --prefer-offline
              if ($LASTEXITCODE -eq 0) {
                Write-Host "npm install completed successfully"
              } else {
                throw "npm install failed with exit code $LASTEXITCODE"
              }
            } catch {
              Write-Host "Both npm ci and npm install failed"
              exit 1
            }
          }
        timeout-minutes: 20

      - name: Install dependencies (Unix)
        if: matrix.os != 'windows-latest'
        run: npm ci
        timeout-minutes: 15

      - name: Create Convex API files
        run: |
          mkdir -p convex/_generated
          echo 'export const api = {} as any;' > convex/_generated/api.ts
          echo 'export const internal = {} as any;' > convex/_generated/internal.ts

      - name: Build application
        run: npm run build
        timeout-minutes: 10

      - name: Clean problematic Convex files (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Remove problematic Convex files that cause electron-builder issues
          Remove-Item -Path "node_modules/convex/dist/esm-types/test" -Recurse -Force -ErrorAction SilentlyContinue
          Get-ChildItem -Path "node_modules/convex" -Recurse -Filter "*.d.ts.map" | Remove-Item -Force

      - name: Clean problematic Convex files (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          # Remove problematic Convex files that cause electron-builder issues
          rm -rf node_modules/convex/dist/esm-types/test
          find node_modules/convex -name "*.d.ts.map" -delete

      - name: Build Electron application
        run: npm run electron:dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        timeout-minutes: 20

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-build
          path: dist-electron/
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 30
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        timeout-minutes: 10

      - name: Create Convex API files
        run: |
          mkdir -p convex/_generated
          echo 'export const api = {} as any;' > convex/_generated/api.ts
          echo 'export const internal = {} as any;' > convex/_generated/internal.ts

      - name: Build application
        run: npm run build
        timeout-minutes: 10

      - name: Build and publish Electron application
        run: npm run electron:dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        timeout-minutes: 20

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## ðŸš€ New Release: ${{ github.ref_name }}
            
            ### What's New
            - Automated build and release
            - Cross-platform support (Windows, macOS, Linux)
            - Electron app with auto-updates
            
            ### Downloads
            - Windows: `Flynns Setup ${{ github.ref_name }}.exe`
            - macOS: `Flynns-${{ github.ref_name }}.dmg`
            - Linux: `Flynns-${{ github.ref_name }}.AppImage`
            
            ### Installation
            1. Download the appropriate file for your platform
            2. Run the installer
            3. The app will automatically update to future versions
            
            ### Changes
            See the [commit history](https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}) for detailed changes.
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-electron/Flynns Setup ${{ github.ref_name }}.exe
          asset_name: Flynns Setup ${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Assets - macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-electron/Flynns-${{ github.ref_name }}.dmg
          asset_name: Flynns-${{ github.ref_name }}.dmg
          asset_content_type: application/octet-stream

      - name: Upload Release Assets - Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-electron/Flynns-${{ github.ref_name }}.AppImage
          asset_name: Flynns-${{ github.ref_name }}.AppImage
          asset_content_type: application/octet-stream 