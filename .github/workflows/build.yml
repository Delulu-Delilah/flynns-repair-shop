name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Disable cache for Windows to avoid EEXIST errors
          cache: ${{ matrix.os != 'windows-latest' && 'npm' || '' }}
          
      - name: Setup npm configuration
        run: |
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 3
          npm config set network-timeout 300000
          npm config set fund false
          npm config set audit-level none
          
      - name: Clean npm cache and workspace (Windows)
        if: runner.os == 'Windows'
        run: |
          npm cache clean --force
          npm cache verify
          if (Test-Path node_modules) { 
            cmd /c "rmdir /s /q node_modules" 2>$null
          }
        
      - name: Clean npm cache and workspace (Unix)
        if: runner.os != 'Windows'
        run: |
          npm cache clean --force
          rm -rf node_modules || true
          
      - name: Install dependencies with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 25
          max_attempts: 3
          retry_wait_seconds: 60
          command: npm ci --no-audit --no-fund --ignore-scripts
        
      - name: Create mock Convex files for build (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir convex\_generated
          echo // Mock API for build > convex\_generated\api.ts
          echo export const api = {} as any; >> convex\_generated\api.ts
          echo export const internal = {} as any; >> convex\_generated\api.ts
          echo // Mock dataModel for build > convex\_generated\dataModel.ts
          echo export type Id^<T^> = string; >> convex\_generated\dataModel.ts
          echo export type Doc^<T^> = any; >> convex\_generated\dataModel.ts
        
      - name: Create mock Convex files for build (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p convex/_generated
          echo "// Mock API for build" > convex/_generated/api.ts
          echo "export const api = {} as any;" >> convex/_generated/api.ts
          echo "export const internal = {} as any;" >> convex/_generated/api.ts
          echo "// Mock dataModel for build" > convex/_generated/dataModel.ts
          echo "export type Id<T> = string;" >> convex/_generated/dataModel.ts
          echo "export type Doc<T> = any;" >> convex/_generated/dataModel.ts
        
      - name: Build Electron app
        run: npm run electron:dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: |
            dist-electron/*.exe
            dist-electron/*.dmg
            dist-electron/*.AppImage
            dist-electron/*.deb
            dist-electron/*.rpm
            dist-electron/*.zip
            dist-electron/latest*.yml
            
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-windows-latest/*
            release-macos-latest/*
            release-ubuntu-latest/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 